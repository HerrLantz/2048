["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$is","~$ysera.test","~$is=","^4"],"~:excludes",["~#set",[]],"~:name","~$ysera.random","~:imports",null,"~:requires",["^ ","^4","^4","~$ysera.collections","^<"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$remove-one","^<"],"~:defs",["^ ","~$get-pseudo-random-number",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","~:line",5,"~:column",8,"~:end-line",5,"~:end-column",32,"~:private",true,"~:arglists",["~#list",["~$quote",["^K",[["~$seed"]]]]]],"^I",true,"^8","~$ysera.random/get-pseudo-random-number","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",32,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^F",1,"~:variadic?",false,"^E",5,"~:ret-tag","~$number","^G",5,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$get-random-int",["^ ","^B",null,"^C",["^ ","^D","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","^E",13,"^F",7,"^G",13,"^H",21,"^J",["^K",["^L",["^K",[["^M","~$max"]]]]],"~:doc","Returns a new seed and a random integer x such that 0 <= x < max."],"^8","~$ysera.random/get-random-int","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",21,"^O",["^K",[["^M","^X"]]],"^P",null,"^Q",["^K",[null,null]],"^F",1,"^R",false,"^E",13,"^S","~$cljs.core/IVector","^G",13,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^M","^X"]]]]],"^Y","Returns a new seed and a random integer x such that 0 <= x < max.","~:test",true],"~$random-nth",["^ ","^B",null,"^C",["^ ","^D","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","^E",23,"^F",7,"^G",23,"^H",17,"^J",["^K",["^L",["^K",[["^M","~$coll"]]]]],"^Y","Returns a new seed and a random element of the collection."],"^8","~$ysera.random/random-nth","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",17,"^O",["^K",[["^M","^12"]]],"^P",null,"^Q",["^K",[null,null]],"^F",1,"^R",false,"^E",23,"^S","^[","^G",23,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^M","^12"]]]]],"^Y","Returns a new seed and a random element of the collection.","^10",true],"~$take-n-random",["^ ","^B",null,"^C",["^ ","^D","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","^E",36,"^F",7,"^G",36,"^H",20,"^J",["^K",["^L",["^K",[["^M","~$n","^12"]]]]],"^Y","Returns a new seed and (at most) n different random elements from the collection.\n   If the collection contains less elements than n, all elements will be returned in a random order."],"^8","~$ysera.random/take-n-random","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",20,"^O",["^K",[["^M","~$n","^12"]]],"^P",null,"^Q",["^K",[null,null]],"^F",1,"^R",false,"^E",36,"^S","^[","^G",36,"^U",3,"^V",true,"^J",["^K",["^L",["^K",[["^M","~$n","^12"]]]]],"^Y","Returns a new seed and (at most) n different random elements from the collection.\n   If the collection contains less elements than n, all elements will be returned in a random order.","^10",true],"~$shuffle-with-seed",["^ ","^B",null,"^C",["^ ","^D","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","^E",65,"^F",7,"^G",65,"^H",24,"^J",["^K",["^L",["^K",[["^M","^12"]]]]],"^Y","Returns a new seed and the collection shuffled."],"^8","~$ysera.random/shuffle-with-seed","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",24,"^O",["^K",[["^M","^12"]]],"^P",null,"^Q",["^K",[null,null]],"^F",1,"^R",false,"^E",65,"^S","^[","^G",65,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^M","^12"]]]]],"^Y","Returns a new seed and the collection shuffled.","^10",true],"~$get-random-uuid",["^ ","^B",null,"^C",["^ ","^D","/Users/patric/dev/clojure/game-2048/resources/public/cljs-out/dev/ysera/random.cljc","^E",81,"^F",7,"^G",81,"^H",22,"^J",["^K",["^L",["^K",[[]]]]],"^Y","Creates a random uuid-string."],"^8","~$ysera.random/get-random-uuid","^D","resources/public/cljs-out/dev/ysera/random.cljc","^H",22,"^O",["^K",[[]]],"^P",null,"^Q",["^K",[null,null]],"^F",1,"^R",false,"^E",81,"^S","~$any","^G",81,"^U",0,"^V",true,"^J",["^K",["^L",["^K",[[]]]]],"^Y","Creates a random uuid-string.","^10",true]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:else","~$pattern","~$actual__23754__auto__","~$let","^D","~$clojure.core/=","^H","~:type","^18","~$expected__23755__auto__","^F","~:fail","^E","~$re-find","~$not","~:expected","~:b","^G","~:error","~:pass","~:actual","~:message"]],"~:order",["^D","^H","^1D","^F","^E","^1I","^G","^1L","^1M","^1J","^1C","^1A","^1E","^1K","^1F","^1H","^1?","~:b","^1B","^1@","^1G","^18"]],"^Y",null]